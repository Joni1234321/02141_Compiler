// Implementation file for parser generated by fsyacc
module FM4FUNParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "FM4FUNParser.fsy"

open FM4FUNTypesAST

# 10 "FM4FUNParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | COMPILERERROR
  | ARROW
  | ASSIGN
  | SKIP
  | IF
  | FI
  | DO
  | OD
  | EQUAL
  | NEQUAL
  | GREATER
  | GREATEREQUAL
  | LESS
  | LESSEQUAL
  | TRUE
  | FALSE
  | NOT
  | AND
  | OR
  | FORALL
  | EXISTS
  | EOF
  | PLUS
  | MINUS
  | TIMES
  | MOD
  | DIV
  | POW
  | VAR of (string)
  | NUM of (float)
  | LPAR
  | RPAR
  | RBRACKET
  | LBRACKET
  | BRACKETS
  | COLON
  | SEMICOLON
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_COMPILERERROR
    | TOKEN_ARROW
    | TOKEN_ASSIGN
    | TOKEN_SKIP
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_EQUAL
    | TOKEN_NEQUAL
    | TOKEN_GREATER
    | TOKEN_GREATEREQUAL
    | TOKEN_LESS
    | TOKEN_LESSEQUAL
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_FORALL
    | TOKEN_EXISTS
    | TOKEN_EOF
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_MOD
    | TOKEN_DIV
    | TOKEN_POW
    | TOKEN_VAR
    | TOKEN_NUM
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_BRACKETS
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_aexpr0
    | NONTERM_aexpr1
    | NONTERM_aexpr2
    | NONTERM_aexpr3
    | NONTERM_bexpr0
    | NONTERM_bexpr1
    | NONTERM_bexpr2
    | NONTERM_cexpr0
    | NONTERM_cexpr1
    | NONTERM_gcexpr0
    | NONTERM_gcexpr1

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | COMPILERERROR  -> 0 
  | ARROW  -> 1 
  | ASSIGN  -> 2 
  | SKIP  -> 3 
  | IF  -> 4 
  | FI  -> 5 
  | DO  -> 6 
  | OD  -> 7 
  | EQUAL  -> 8 
  | NEQUAL  -> 9 
  | GREATER  -> 10 
  | GREATEREQUAL  -> 11 
  | LESS  -> 12 
  | LESSEQUAL  -> 13 
  | TRUE  -> 14 
  | FALSE  -> 15 
  | NOT  -> 16 
  | AND  -> 17 
  | OR  -> 18 
  | FORALL  -> 19 
  | EXISTS  -> 20 
  | EOF  -> 21 
  | PLUS  -> 22 
  | MINUS  -> 23 
  | TIMES  -> 24 
  | MOD  -> 25 
  | DIV  -> 26 
  | POW  -> 27 
  | VAR _ -> 28 
  | NUM _ -> 29 
  | LPAR  -> 30 
  | RPAR  -> 31 
  | RBRACKET  -> 32 
  | LBRACKET  -> 33 
  | BRACKETS  -> 34 
  | COLON  -> 35 
  | SEMICOLON  -> 36 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_COMPILERERROR 
  | 1 -> TOKEN_ARROW 
  | 2 -> TOKEN_ASSIGN 
  | 3 -> TOKEN_SKIP 
  | 4 -> TOKEN_IF 
  | 5 -> TOKEN_FI 
  | 6 -> TOKEN_DO 
  | 7 -> TOKEN_OD 
  | 8 -> TOKEN_EQUAL 
  | 9 -> TOKEN_NEQUAL 
  | 10 -> TOKEN_GREATER 
  | 11 -> TOKEN_GREATEREQUAL 
  | 12 -> TOKEN_LESS 
  | 13 -> TOKEN_LESSEQUAL 
  | 14 -> TOKEN_TRUE 
  | 15 -> TOKEN_FALSE 
  | 16 -> TOKEN_NOT 
  | 17 -> TOKEN_AND 
  | 18 -> TOKEN_OR 
  | 19 -> TOKEN_FORALL 
  | 20 -> TOKEN_EXISTS 
  | 21 -> TOKEN_EOF 
  | 22 -> TOKEN_PLUS 
  | 23 -> TOKEN_MINUS 
  | 24 -> TOKEN_TIMES 
  | 25 -> TOKEN_MOD 
  | 26 -> TOKEN_DIV 
  | 27 -> TOKEN_POW 
  | 28 -> TOKEN_VAR 
  | 29 -> TOKEN_NUM 
  | 30 -> TOKEN_LPAR 
  | 31 -> TOKEN_RPAR 
  | 32 -> TOKEN_RBRACKET 
  | 33 -> TOKEN_LBRACKET 
  | 34 -> TOKEN_BRACKETS 
  | 35 -> TOKEN_COLON 
  | 36 -> TOKEN_SEMICOLON 
  | 39 -> TOKEN_end_of_input
  | 37 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_aexpr0 
    | 3 -> NONTERM_aexpr0 
    | 4 -> NONTERM_aexpr0 
    | 5 -> NONTERM_aexpr1 
    | 6 -> NONTERM_aexpr1 
    | 7 -> NONTERM_aexpr1 
    | 8 -> NONTERM_aexpr1 
    | 9 -> NONTERM_aexpr2 
    | 10 -> NONTERM_aexpr2 
    | 11 -> NONTERM_aexpr3 
    | 12 -> NONTERM_aexpr3 
    | 13 -> NONTERM_aexpr3 
    | 14 -> NONTERM_aexpr3 
    | 15 -> NONTERM_aexpr3 
    | 16 -> NONTERM_aexpr3 
    | 17 -> NONTERM_bexpr0 
    | 18 -> NONTERM_bexpr0 
    | 19 -> NONTERM_bexpr0 
    | 20 -> NONTERM_bexpr1 
    | 21 -> NONTERM_bexpr1 
    | 22 -> NONTERM_bexpr1 
    | 23 -> NONTERM_bexpr2 
    | 24 -> NONTERM_bexpr2 
    | 25 -> NONTERM_bexpr2 
    | 26 -> NONTERM_bexpr2 
    | 27 -> NONTERM_bexpr2 
    | 28 -> NONTERM_bexpr2 
    | 29 -> NONTERM_bexpr2 
    | 30 -> NONTERM_bexpr2 
    | 31 -> NONTERM_bexpr2 
    | 32 -> NONTERM_bexpr2 
    | 33 -> NONTERM_cexpr0 
    | 34 -> NONTERM_cexpr0 
    | 35 -> NONTERM_cexpr1 
    | 36 -> NONTERM_cexpr1 
    | 37 -> NONTERM_cexpr1 
    | 38 -> NONTERM_cexpr1 
    | 39 -> NONTERM_cexpr1 
    | 40 -> NONTERM_gcexpr0 
    | 41 -> NONTERM_gcexpr0 
    | 42 -> NONTERM_gcexpr1 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 39 
let _fsyacc_tagOfErrorTerminal = 37

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | COMPILERERROR  -> "COMPILERERROR" 
  | ARROW  -> "ARROW" 
  | ASSIGN  -> "ASSIGN" 
  | SKIP  -> "SKIP" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | EQUAL  -> "EQUAL" 
  | NEQUAL  -> "NEQUAL" 
  | GREATER  -> "GREATER" 
  | GREATEREQUAL  -> "GREATEREQUAL" 
  | LESS  -> "LESS" 
  | LESSEQUAL  -> "LESSEQUAL" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | FORALL  -> "FORALL" 
  | EXISTS  -> "EXISTS" 
  | EOF  -> "EOF" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | MOD  -> "MOD" 
  | DIV  -> "DIV" 
  | POW  -> "POW" 
  | VAR _ -> "VAR" 
  | NUM _ -> "NUM" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | RBRACKET  -> "RBRACKET" 
  | LBRACKET  -> "LBRACKET" 
  | BRACKETS  -> "BRACKETS" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | COMPILERERROR  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NEQUAL  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | GREATEREQUAL  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | LESSEQUAL  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | FORALL  -> (null : System.Object) 
  | EXISTS  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | BRACKETS  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 20us; 65535us; 38us; 4us; 40us; 5us; 41us; 6us; 45us; 7us; 47us; 7us; 50us; 7us; 52us; 7us; 55us; 7us; 60us; 8us; 61us; 9us; 62us; 10us; 63us; 11us; 64us; 12us; 65us; 13us; 70us; 14us; 71us; 15us; 73us; 16us; 74us; 7us; 77us; 7us; 82us; 7us; 22us; 65535us; 17us; 18us; 19us; 20us; 38us; 21us; 40us; 21us; 41us; 21us; 45us; 21us; 47us; 21us; 50us; 21us; 52us; 21us; 55us; 21us; 60us; 21us; 61us; 21us; 62us; 21us; 63us; 21us; 64us; 21us; 65us; 21us; 70us; 21us; 71us; 21us; 73us; 21us; 74us; 21us; 77us; 21us; 82us; 21us; 26us; 65535us; 17us; 28us; 19us; 28us; 22us; 23us; 24us; 25us; 26us; 27us; 30us; 31us; 38us; 28us; 40us; 28us; 41us; 28us; 45us; 28us; 47us; 28us; 50us; 28us; 52us; 28us; 55us; 28us; 60us; 28us; 61us; 28us; 62us; 28us; 63us; 28us; 64us; 28us; 65us; 28us; 70us; 28us; 71us; 28us; 73us; 28us; 74us; 28us; 77us; 28us; 82us; 28us; 28us; 65535us; 17us; 29us; 19us; 29us; 22us; 29us; 24us; 29us; 26us; 29us; 30us; 29us; 32us; 33us; 34us; 35us; 38us; 29us; 40us; 29us; 41us; 29us; 45us; 29us; 47us; 29us; 50us; 29us; 52us; 29us; 55us; 29us; 60us; 29us; 61us; 29us; 62us; 29us; 63us; 29us; 64us; 29us; 65us; 29us; 70us; 29us; 71us; 29us; 73us; 29us; 74us; 29us; 77us; 29us; 82us; 29us; 4us; 65535us; 41us; 43us; 74us; 44us; 77us; 44us; 82us; 44us; 6us; 65535us; 41us; 49us; 45us; 46us; 47us; 48us; 74us; 49us; 77us; 49us; 82us; 49us; 9us; 65535us; 41us; 54us; 45us; 54us; 47us; 54us; 50us; 51us; 52us; 53us; 55us; 56us; 74us; 54us; 77us; 54us; 82us; 54us; 3us; 65535us; 0us; 2us; 67us; 68us; 84us; 85us; 3us; 65535us; 0us; 66us; 67us; 66us; 84us; 66us; 3us; 65535us; 74us; 75us; 77us; 78us; 82us; 83us; 3us; 65535us; 74us; 81us; 77us; 81us; 82us; 81us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 24us; 47us; 74us; 103us; 108us; 115us; 125us; 129us; 133us; 137us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 3us; 2us; 3us; 15us; 3us; 2us; 3us; 16us; 9us; 2us; 3us; 16us; 27us; 28us; 29us; 30us; 31us; 32us; 8us; 2us; 3us; 27us; 28us; 29us; 30us; 31us; 32us; 3us; 2us; 3us; 27us; 3us; 2us; 3us; 28us; 3us; 2us; 3us; 29us; 3us; 2us; 3us; 30us; 3us; 2us; 3us; 31us; 3us; 2us; 3us; 32us; 3us; 2us; 3us; 35us; 3us; 2us; 3us; 36us; 3us; 2us; 3us; 36us; 1us; 2us; 4us; 2us; 5us; 6us; 7us; 1us; 3us; 4us; 3us; 5us; 6us; 7us; 4us; 4us; 5us; 6us; 7us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 8us; 2us; 9us; 10us; 1us; 9us; 1us; 9us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 2us; 14us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 2us; 16us; 26us; 1us; 16us; 3us; 17us; 18us; 26us; 3us; 17us; 18us; 42us; 1us; 17us; 3us; 17us; 20us; 21us; 1us; 18us; 3us; 18us; 20us; 21us; 3us; 19us; 20us; 21us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 2us; 33us; 34us; 1us; 33us; 1us; 33us; 2us; 35us; 36us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 2us; 40us; 41us; 1us; 40us; 1us; 40us; 1us; 42us; 1us; 42us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 12us; 16us; 26us; 35us; 39us; 43us; 47us; 51us; 55us; 59us; 63us; 67us; 71us; 73us; 78us; 80us; 85us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 124us; 126us; 128us; 130us; 133us; 135us; 139us; 143us; 145us; 149us; 151us; 155us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 179us; 181us; 183us; 185us; 187us; 189us; 191us; 194us; 196us; 198us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 226us; 228us; 230us; 232us; |]
let _fsyacc_action_rows = 86
let _fsyacc_actionTableElements = [|4us; 32768us; 3us; 80us; 4us; 74us; 6us; 77us; 28us; 69us; 0us; 49152us; 1us; 32768us; 21us; 3us; 0us; 16385us; 3us; 32768us; 22us; 17us; 23us; 19us; 32us; 39us; 3us; 32768us; 22us; 17us; 23us; 19us; 31us; 42us; 9us; 32768us; 8us; 60us; 9us; 61us; 10us; 62us; 11us; 63us; 12us; 64us; 13us; 65us; 22us; 17us; 23us; 19us; 31us; 42us; 8us; 32768us; 8us; 60us; 9us; 61us; 10us; 62us; 11us; 63us; 12us; 64us; 13us; 65us; 22us; 17us; 23us; 19us; 2us; 16411us; 22us; 17us; 23us; 19us; 2us; 16412us; 22us; 17us; 23us; 19us; 2us; 16413us; 22us; 17us; 23us; 19us; 2us; 16414us; 22us; 17us; 23us; 19us; 2us; 16415us; 22us; 17us; 23us; 19us; 2us; 16416us; 22us; 17us; 23us; 19us; 2us; 16419us; 22us; 17us; 23us; 19us; 3us; 32768us; 22us; 17us; 23us; 19us; 32us; 72us; 2us; 16420us; 22us; 17us; 23us; 19us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 3us; 16386us; 24us; 22us; 25us; 26us; 26us; 24us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 3us; 16387us; 24us; 22us; 25us; 26us; 26us; 24us; 3us; 16388us; 24us; 22us; 25us; 26us; 26us; 24us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 0us; 16389us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 0us; 16390us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 0us; 16391us; 0us; 16392us; 1us; 16394us; 27us; 30us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 0us; 16393us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 0us; 16395us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 0us; 16396us; 0us; 16397us; 1us; 16398us; 33us; 38us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 0us; 16399us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 8us; 32768us; 14us; 57us; 15us; 58us; 16us; 55us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 41us; 0us; 16400us; 3us; 32768us; 18us; 45us; 20us; 47us; 31us; 59us; 3us; 32768us; 1us; 84us; 18us; 45us; 20us; 47us; 8us; 32768us; 14us; 57us; 15us; 58us; 16us; 55us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 41us; 2us; 16401us; 17us; 50us; 19us; 52us; 8us; 32768us; 14us; 57us; 15us; 58us; 16us; 55us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 41us; 2us; 16402us; 17us; 50us; 19us; 52us; 2us; 16403us; 17us; 50us; 19us; 52us; 8us; 32768us; 14us; 57us; 15us; 58us; 16us; 55us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 41us; 0us; 16404us; 8us; 32768us; 14us; 57us; 15us; 58us; 16us; 55us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 41us; 0us; 16405us; 0us; 16406us; 8us; 32768us; 14us; 57us; 15us; 58us; 16us; 55us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 41us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 0us; 16410us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 1us; 16418us; 36us; 67us; 4us; 32768us; 3us; 80us; 4us; 74us; 6us; 77us; 28us; 69us; 0us; 16417us; 2us; 32768us; 2us; 70us; 33us; 71us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 1us; 32768us; 2us; 73us; 5us; 32768us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 40us; 8us; 32768us; 14us; 57us; 15us; 58us; 16us; 55us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 41us; 1us; 32768us; 5us; 76us; 0us; 16421us; 8us; 32768us; 14us; 57us; 15us; 58us; 16us; 55us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 41us; 1us; 32768us; 7us; 79us; 0us; 16422us; 0us; 16423us; 1us; 16425us; 34us; 82us; 8us; 32768us; 14us; 57us; 15us; 58us; 16us; 55us; 22us; 32us; 23us; 34us; 28us; 37us; 29us; 36us; 30us; 41us; 0us; 16424us; 4us; 32768us; 3us; 80us; 4us; 74us; 6us; 77us; 28us; 69us; 0us; 16426us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 8us; 9us; 13us; 17us; 27us; 36us; 39us; 42us; 45us; 48us; 51us; 54us; 57us; 61us; 64us; 70us; 74us; 80us; 84us; 88us; 94us; 95us; 101us; 102us; 108us; 109us; 110us; 112us; 118us; 119us; 125us; 126us; 132us; 133us; 134us; 136us; 142us; 143us; 149us; 158us; 159us; 163us; 167us; 176us; 179us; 188us; 191us; 194us; 203us; 204us; 213us; 214us; 215us; 224us; 225us; 226us; 227us; 228us; 234us; 240us; 246us; 252us; 258us; 264us; 266us; 271us; 272us; 275us; 281us; 287us; 289us; 295us; 304us; 306us; 307us; 316us; 318us; 319us; 320us; 322us; 331us; 332us; 337us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 1us; 3us; 3us; 3us; 1us; 3us; 1us; 2us; 2us; 1us; 1us; 4us; 3us; 3us; 3us; 1us; 3us; 3us; 1us; 2us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 6us; 3us; 3us; 1us; 3us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 16390us; 65535us; 16391us; 16392us; 65535us; 65535us; 16393us; 65535us; 16395us; 65535us; 16396us; 16397us; 65535us; 65535us; 16399us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 16405us; 16406us; 65535us; 16407us; 16408us; 16409us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16421us; 65535us; 65535us; 16422us; 16423us; 65535us; 65535us; 16424us; 65535us; 16426us; |]
let _fsyacc_reductions ()  =    [| 
# 335 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : c)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 344 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : c)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "FM4FUNParser.fsy"
                                                     _1 
                   )
# 55 "FM4FUNParser.fsy"
                 : c));
# 355 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "FM4FUNParser.fsy"
                                                PlusExpr (_1, _3) 
                   )
# 66 "FM4FUNParser.fsy"
                 : a));
# 367 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "FM4FUNParser.fsy"
                                                MinusExpr (_1, _3) 
                   )
# 67 "FM4FUNParser.fsy"
                 : a));
# 379 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "FM4FUNParser.fsy"
                                                _1 
                   )
# 68 "FM4FUNParser.fsy"
                 : a));
# 390 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "FM4FUNParser.fsy"
                                                TimesExpr (_1, _3) 
                   )
# 71 "FM4FUNParser.fsy"
                 : a));
# 402 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "FM4FUNParser.fsy"
                                                DivExpr (_1, _3) 
                   )
# 72 "FM4FUNParser.fsy"
                 : a));
# 414 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "FM4FUNParser.fsy"
                                                ModExpr (_1, _3) 
                   )
# 73 "FM4FUNParser.fsy"
                 : a));
# 426 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "FM4FUNParser.fsy"
                                                _1 
                   )
# 74 "FM4FUNParser.fsy"
                 : a));
# 437 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "FM4FUNParser.fsy"
                                                PowExpr (_1, _3) 
                   )
# 77 "FM4FUNParser.fsy"
                 : a));
# 449 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "FM4FUNParser.fsy"
                                                _1 
                   )
# 78 "FM4FUNParser.fsy"
                 : a));
# 460 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "FM4FUNParser.fsy"
                                                        UPlusExpr (_2) 
                   )
# 81 "FM4FUNParser.fsy"
                 : a));
# 471 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "FM4FUNParser.fsy"
                                                        UMinusExpr (_2) 
                   )
# 82 "FM4FUNParser.fsy"
                 : a));
# 482 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "FM4FUNParser.fsy"
                                                        Num(_1) 
                   )
# 83 "FM4FUNParser.fsy"
                 : a));
# 493 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "FM4FUNParser.fsy"
                                                        Var(_1) 
                   )
# 84 "FM4FUNParser.fsy"
                 : a));
# 504 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "FM4FUNParser.fsy"
                                                        ArrayVar(_1, _3) 
                   )
# 85 "FM4FUNParser.fsy"
                 : a));
# 516 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "FM4FUNParser.fsy"
                                                        _2 
                   )
# 86 "FM4FUNParser.fsy"
                 : a));
# 527 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "FM4FUNParser.fsy"
                                                 OrOp (_1, _3) 
                   )
# 89 "FM4FUNParser.fsy"
                 : b));
# 539 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "FM4FUNParser.fsy"
                                                 ExistsOp (_1, _3) 
                   )
# 90 "FM4FUNParser.fsy"
                 : b));
# 551 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "FM4FUNParser.fsy"
                                                 _1 
                   )
# 91 "FM4FUNParser.fsy"
                 : b));
# 562 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "FM4FUNParser.fsy"
                                                 AndOp (_1, _3) 
                   )
# 94 "FM4FUNParser.fsy"
                 : b));
# 574 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "FM4FUNParser.fsy"
                                                 ForAllOp (_1, _3) 
                   )
# 95 "FM4FUNParser.fsy"
                 : b));
# 586 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "FM4FUNParser.fsy"
                                                 _1 
                   )
# 96 "FM4FUNParser.fsy"
                 : b));
# 597 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "FM4FUNParser.fsy"
                                                 NotOp (_2) 
                   )
# 99 "FM4FUNParser.fsy"
                 : b));
# 608 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "FM4FUNParser.fsy"
                                                 Bool(true) 
                   )
# 100 "FM4FUNParser.fsy"
                 : b));
# 618 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "FM4FUNParser.fsy"
                                                 Bool(false) 
                   )
# 101 "FM4FUNParser.fsy"
                 : b));
# 628 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "FM4FUNParser.fsy"
                                                 _2 
                   )
# 102 "FM4FUNParser.fsy"
                 : b));
# 639 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "FM4FUNParser.fsy"
                                                 EqualOp(_1, _3) 
                   )
# 104 "FM4FUNParser.fsy"
                 : b));
# 651 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "FM4FUNParser.fsy"
                                                 NEqualOp(_1, _3) 
                   )
# 105 "FM4FUNParser.fsy"
                 : b));
# 663 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "FM4FUNParser.fsy"
                                                 GreaterOp(_1, _3) 
                   )
# 106 "FM4FUNParser.fsy"
                 : b));
# 675 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "FM4FUNParser.fsy"
                                                       GreaterEqualOp (_1, _3) 
                   )
# 107 "FM4FUNParser.fsy"
                 : b));
# 687 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "FM4FUNParser.fsy"
                                                       LessOp (_1, _3) 
                   )
# 108 "FM4FUNParser.fsy"
                 : b));
# 699 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "FM4FUNParser.fsy"
                                                       LessEqualOp (_1, _3) 
                   )
# 109 "FM4FUNParser.fsy"
                 : b));
# 711 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : c)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : c)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "FM4FUNParser.fsy"
                                                         MultipleStatement (_1, _3) 
                   )
# 113 "FM4FUNParser.fsy"
                 : c));
# 723 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : c)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "FM4FUNParser.fsy"
                                 _1
                   )
# 114 "FM4FUNParser.fsy"
                 : c));
# 734 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "FM4FUNParser.fsy"
                                                         AssignStatement (_1, _3) 
                   )
# 117 "FM4FUNParser.fsy"
                 : c));
# 746 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "FM4FUNParser.fsy"
                                                                        AssignArrayStatement (_1, _3, _6) 
                   )
# 118 "FM4FUNParser.fsy"
                 : c));
# 759 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : gc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "FM4FUNParser.fsy"
                                                         IfStatement (_2) 
                   )
# 119 "FM4FUNParser.fsy"
                 : c));
# 770 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : gc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "FM4FUNParser.fsy"
                                                         DoStatement (_2) 
                   )
# 120 "FM4FUNParser.fsy"
                 : c));
# 781 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "FM4FUNParser.fsy"
                                                         SkipStatement 
                   )
# 121 "FM4FUNParser.fsy"
                 : c));
# 791 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : gc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : gc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "FM4FUNParser.fsy"
                                                    ElseStatement(_1, _3) 
                   )
# 124 "FM4FUNParser.fsy"
                 : gc));
# 803 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : gc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "FM4FUNParser.fsy"
                                   _1 
                   )
# 125 "FM4FUNParser.fsy"
                 : gc));
# 814 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : c)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "FM4FUNParser.fsy"
                                               ThenStatement(_1, _3) 
                   )
# 127 "FM4FUNParser.fsy"
                 : gc));
|]
# 827 "FM4FUNParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 40;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : c =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
