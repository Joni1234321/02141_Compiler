// Open the file that defines the type "expr" we shall use as AST
%{
open CalculatorTypesAST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token TIMES DIV PLUS MINUS POW LOG LPAR RPAR EOF
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)


// // We declare the initial non-terminal symbol
%start start
%type <expr> start
%type <expr> expression0
%type <expr> expression1
%type <expr> expression2
%type <expr> expression3

// Grammar productions
%%
// we start with level 0
start: expression0 EOF { $1 }
// Now we have one level for each of the operator precedence levels (see GCL rules)
// Note how we deal with associativity by allowing recursion on one side only
expression0:
  | expression0 PLUS expression1 { PlusExpr($1,$3) }
  | expression0 MINUS expression1 { MinusExpr($1,$3) }
  | expression1 { $1 }
expression1:
  | expression1 TIMES expression2 { TimesExpr($1,$3) }
  | expression1 DIV expression2 { DivExpr($1,$3) }
  | expression2 { $1 }
expression2:
  | expression3 POW expression2 { PowExpr($1,$3) }
  | expression3 { $1 }
expression3:
  | PLUS expression3 { UPlusExpr($2) }
  | MINUS expression3 { UMinusExpr($2) }
  | NUM { Num($1) }
  | LPAR expression0 RPAR { $2 }

%%
